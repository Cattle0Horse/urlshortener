// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Cattle0Horse/url-shortener/internal/model"
)

func newSequence(db *gorm.DB, opts ...gen.DOOption) sequence {
	_sequence := sequence{}

	_sequence.sequenceDo.UseDB(db, opts...)
	_sequence.sequenceDo.UseModel(&model.Sequence{})

	tableName := _sequence.sequenceDo.TableName()
	_sequence.ALL = field.NewAsterisk(tableName)
	_sequence.ID = field.NewUint(tableName, "id")
	_sequence.CreatedAt = field.NewTime(tableName, "created_at")
	_sequence.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sequence.DeletedAt = field.NewField(tableName, "deleted_at")
	_sequence.Name = field.NewString(tableName, "name")
	_sequence.Sequence = field.NewInt64(tableName, "sequence")
	_sequence.Version = field.NewInt64(tableName, "version")

	_sequence.fillFieldMap()

	return _sequence
}

type sequence struct {
	sequenceDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Sequence  field.Int64
	Version   field.Int64

	fieldMap map[string]field.Expr
}

func (s sequence) Table(newTableName string) *sequence {
	s.sequenceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sequence) As(alias string) *sequence {
	s.sequenceDo.DO = *(s.sequenceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sequence) updateTableName(table string) *sequence {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Name = field.NewString(table, "name")
	s.Sequence = field.NewInt64(table, "sequence")
	s.Version = field.NewInt64(table, "version")

	s.fillFieldMap()

	return s
}

func (s *sequence) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sequence) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["sequence"] = s.Sequence
	s.fieldMap["version"] = s.Version
}

func (s sequence) clone(db *gorm.DB) sequence {
	s.sequenceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sequence) replaceDB(db *gorm.DB) sequence {
	s.sequenceDo.ReplaceDB(db)
	return s
}

type sequenceDo struct{ gen.DO }

func (s sequenceDo) Debug() *sequenceDo {
	return s.withDO(s.DO.Debug())
}

func (s sequenceDo) WithContext(ctx context.Context) *sequenceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sequenceDo) ReadDB() *sequenceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sequenceDo) WriteDB() *sequenceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sequenceDo) Session(config *gorm.Session) *sequenceDo {
	return s.withDO(s.DO.Session(config))
}

func (s sequenceDo) Clauses(conds ...clause.Expression) *sequenceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sequenceDo) Returning(value interface{}, columns ...string) *sequenceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sequenceDo) Not(conds ...gen.Condition) *sequenceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sequenceDo) Or(conds ...gen.Condition) *sequenceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sequenceDo) Select(conds ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sequenceDo) Where(conds ...gen.Condition) *sequenceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sequenceDo) Order(conds ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sequenceDo) Distinct(cols ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sequenceDo) Omit(cols ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sequenceDo) Join(table schema.Tabler, on ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sequenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sequenceDo) RightJoin(table schema.Tabler, on ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sequenceDo) Group(cols ...field.Expr) *sequenceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sequenceDo) Having(conds ...gen.Condition) *sequenceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sequenceDo) Limit(limit int) *sequenceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sequenceDo) Offset(offset int) *sequenceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sequenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sequenceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sequenceDo) Unscoped() *sequenceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sequenceDo) Create(values ...*model.Sequence) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sequenceDo) CreateInBatches(values []*model.Sequence, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sequenceDo) Save(values ...*model.Sequence) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sequenceDo) First() (*model.Sequence, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sequence), nil
	}
}

func (s sequenceDo) Take() (*model.Sequence, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sequence), nil
	}
}

func (s sequenceDo) Last() (*model.Sequence, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sequence), nil
	}
}

func (s sequenceDo) Find() ([]*model.Sequence, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sequence), err
}

func (s sequenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sequence, err error) {
	buf := make([]*model.Sequence, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sequenceDo) FindInBatches(result *[]*model.Sequence, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sequenceDo) Attrs(attrs ...field.AssignExpr) *sequenceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sequenceDo) Assign(attrs ...field.AssignExpr) *sequenceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sequenceDo) Joins(fields ...field.RelationField) *sequenceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sequenceDo) Preload(fields ...field.RelationField) *sequenceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sequenceDo) FirstOrInit() (*model.Sequence, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sequence), nil
	}
}

func (s sequenceDo) FirstOrCreate() (*model.Sequence, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sequence), nil
	}
}

func (s sequenceDo) FindByPage(offset int, limit int) (result []*model.Sequence, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sequenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sequenceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sequenceDo) Delete(models ...*model.Sequence) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sequenceDo) withDO(do gen.Dao) *sequenceDo {
	s.DO = *do.(*gen.DO)
	return s
}
